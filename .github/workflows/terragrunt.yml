name: Terragrunt

on:
  workflow_call:
    inputs:
      environment:
        type: string
        description: "The environment to deploy to"
        required: true
      running:
        type: boolean
        description: "Up and running"
        required: true
      terragrunt_config_path:
        type: string
        description: "the path where the hcl file is located for the microservice"
        required: true

env:
  TERRAFORM_VERSION: 1.4.6
  TERRAGRUNT_VERSION: 0.45.17

jobs:
  deployment:
    name: Deployment
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    env:
      DOMAIN_NAME: ${{ vars.DOMAIN_NAME }}
      AWS_REGION_NAME: ${{ vars.AWS_REGION_NAME }}
      AWS_PROFILE_NAME: ${{ vars.AWS_PROFILE_NAME }}
      AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
      AWS_ACCESS_KEY: ${{ vars.AWS_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup AWS CLI
        run: |
          aws --version
          aws configure set aws_access_key_id $AWS_ACCESS_KEY
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set region $AWS_REGION_NAME

      # # FIXME: there is no package for registry.terraform.io/hashicorp/aws there is no package for registry.terraform.io/hashicorp/null
      # - name: Login to ECR
      #   env:
      #     ECR_REGISTRY_URI: ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION_NAME }}.amazonaws.com
      #     AWS_CLI_SERVICE: ecr
      #     ECR_IMAGE_TAG: latest
      #   run: |
      #     if [[ $AWS_CLI_SERVICE == ecr ]]; then
      #       aws ecr get-login-password --region $AWS_REGION_NAME | docker login --username AWS --password-stdin $ECR_REGISTRY_URI
      #     elif [[ $AWS_CLI_SERVICE == ecr-public ]]; then
      #       aws ecr-public get-login-password --region $AWS_REGION_NAME | docker login --username AWS ---password-stdin public.ecr.aws
      #     fi
      # - name: Terragrunt Plan
      #   run: |
      #     sudo docker build --progress=plain -t this-image -f Dockerfile .
      #     sudo docker run -it \
      #       -v /tmp:/tmp \
      #       --user 1001:1001 \
      #       --env AWS_REGION_NAME=${AWS_REGION_NAME} \
      #       --env AWS_PROFILE_NAME=${AWS_PROFILE_NAME} \
      #       --env AWS_ACCESS_KEY=${AWS_ACCESS_KEY} \
      #       --env AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} \
      #       --env AWS_ACCOUNT_ID=${AWS_ACCOUNT_ID} \
      #       --env ENVIRONMENT_NAME=${ENVIRONMENT_NAME} \
      #       --env GITHUB_TOKEN=${GH_TERRA_TOKEN} \
      #       --env KEY="${KEY}" \
      #       --env P_KEY="${P_KEY}" \
      #       --env GH_EVENT="up" \
      #       this-image \
      #       /bin/bash -c '

      #         # tmp ownership
      #         sudo mkdir -p /tmp/out
      #         sudo chown 1001:1001 /tmp/out
      #         sudo chmod g+s /tmp/out
      #         ls -l /tmp/out

      #         # aws
      #         make aws-auth

      #         # github token
      #         make gh-auth-check

      #         # ssh
      #         eval `ssh-agent -s`
      #         mkdir -p ~/.ssh
      #         SSH_FOLDER=$(cd ~/.ssh; pwd)
      #         echo ${SSH_FOLDER}
      #         echo "${KEY}" > ~/.ssh/action
      #         echo "${P_KEY}" > ~/.ssh/action.pub
      #         sudo chmod -R 600 ${SSH_FOLDER}/action
      #         ssh-add ~/.ssh/action
      #         ssh-keyscan github.com >> ~/.ssh/known_hosts
      #         cat ~/.ssh/known_hosts

      #         # terragrunt
      #         if [[ "${GH_EVENT}" == "down" ]]; then
      #           make scraper-prepare GITHUB_TOKEN=${GITHUB_TOKEN} SERVICE_UP=false
      #         else
      #           make scraper-prepare GITHUB_TOKEN=${GITHUB_TOKEN} SERVICE_UP=true
      #         fi
      #         make scraper-init
      #         make scraper-validate 2>&1 > /tmp/out/validate.txt
      #         make scraper-plan OUTPUT_FILE=/tmp/out/plan.tmp
      #         terraform show -no-color /tmp/out/plan.tmp >tmp/plan.out
      #         '
      #         cat /tmp/out/validate.txt >${GITHUB_WORKSPACE}/validate.txt
      #         cat /tmp/out/plan.out >${GITHUB_WORKSPACE}/plan.out

      - uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Setup Terraform v${{ env.TERRAFORM_VERSION }}
        uses: hashicorp/setup-Terraform@v1
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: true

      - name: Setup Terraform version
        run: terraform --version

      - name: Setup Terraform wrapper path
        run: which terraform
      - name: Setup Terragrunt v${{ env.TERRAGRUNT_VERSION }}
        run: |
          sudo wget -q -O /bin/terragrunt "https://github.com/gruntwork-io/terragrunt/releases/download/v${{ env.TERRAGRUNT_VERSION }}/terragrunt_linux_amd64"
          sudo chmod +x /bin/terragrunt
          terragrunt -v

      - name: Terragrunt destroy
        id: destroy
        if: inputs.running == false
        run: |
          make destroy-ecs TERRAGRUNT_CONFIG_PATH=${{ inputs.terragrunt_config_path }}

      - name: Terragrunt init
        id: init
        if: inputs.running == true
        run: |
          make init TERRAGRUNT_CONFIG_PATH=${{ inputs.terragrunt_config_path }}

      - name: Terragrunt validate
        id: validate
        if: inputs.running == true
        run: |
          make validate TERRAGRUNT_CONFIG_PATH=${{ inputs.terragrunt_config_path }}

      - name: Terragrunt plan
        id: plan
        if: github.event_name == 'pull_request' && inputs.running == true
        continue-on-error: true
        run: |
          make plan TERRAGRUNT_CONFIG_PATH=${{ inputs.terragrunt_config_path }} OUTPUT_FILE=/tmp/plan.tmp
          terraform show -no-color /tmp/plan.tmp >${GITHUB_WORKSPACE}/plan.out

      - name: Terraform - Show Plan in PR
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request' && inputs.running == true
        with:
          github-token: ${{ secrets.GH_TERRA_TOKEN }}
          script: |
            const run_url = process.env.GITHUB_SERVER_URL + '/' + process.env.GITHUB_REPOSITORY + '/actions/runs/' + process.env.GITHUB_RUN_ID
            const run_link = '<a href="' + run_url + '">Actions</a>.'
            const fs = require('fs')
            const plan_file = fs.readFileSync('plan.out', 'utf8')
            const plan = plan_file.length > 65000 ? plan_file.toString().substring(0, 65000) + " ..." : plan_file
            const truncated_message = plan_file.length > 65000 ? "Output is too long and was truncated. You can read full Plan in " + run_link + "<br /><br />" : ""
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${plan}
            \`\`\`

            </details>
            ${truncated_message}

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ github.workspace }}\`, Workflow: \`${{ github.workflow }}\`*`;
              
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terragrunt apply
        if: github.event_name == 'workflow_dispatch' && inputs.running == true
        run: |
          make apply TERRAGRUNT_CONFIG_PATH=${{ inputs.terragrunt_config_path }}
