name: Terraform Plan

on:
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize, reopened]

env:
  tf_version: '1.5.7'
  tg_version: '0.53.2'
  working_dir: 'infra'
  COMPANY_REF: ${{ vars.COMPANY_REF }}
  REPO_REF: ${{ vars.REPO_REF }}
  BRANCH_REF: ${{ github.head_ref || github.ref_name }}
  DOMAIN_NAME: ${{ vars.DOMAIN_NAME }}
  AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}
  AWS_PROFILE_NAME: ${{ vars.AWS_PROFILE_NAME }}
  AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
  AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  terragrunt:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Validate Branch Ref
        run: |
          if [[ ! ${{ env.BRANCH_REF }} =~ ^[a-zA-Z0-9_-]+$ ]]; then
            echo "Invalid BRANCH_REF"
            exit 1
          fi

      - name: Terragrunt Init
        id: init
        uses: gruntwork-io/terragrunt-action@main
        with:
          tf_version: ${{ env.tf_version }}
          tg_version: ${{ env.tg_version }}
          tg_dir: ${{ env.working_dir }}
          tg_command: 'init'

      - name: Terragrunt Validate
        id: validate
        uses: gruntwork-io/terragrunt-action@main
        with:
          tf_version: ${{ env.tf_version }}
          tg_version: ${{ env.tg_version }}
          tg_dir: ${{ env.working_dir }}
          tg_command: 'validate'
            
      - name: Terragrunt Plan
        id: plan
        uses: gruntwork-io/terragrunt-action@main
        with:
          tf_version: ${{ env.tf_version }}
          tg_version: ${{ env.tg_version }}
          tg_dir: ${{ env.working_dir }}
          tg_command: 'plan'

      - uses: actions/github-script@main
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Plan')
            })

            // 2. Prepare format of the comment
            const output = `
            <!---#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`-->
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

            <!---
            <details><summary>Validation Output</summary>
            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`
            </details>
            -->

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <!---
            <details><summary>Show Plan</summary>
            \`\`\`\n
            ${{ steps.plan.outputs.stdout }}
            \`\`\`
            </details>
            -->

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.working_dir }}\`, Workflow: \`${{ github.workflow }}\`*
            `;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
