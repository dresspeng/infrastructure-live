name: Scraper

on:
  workflow_dispatch:
    inputs:
      environment:
        type: environment
        description: 'The environment to deploy to'
        required: true
        default: KookaS
      running:
        type: boolean
        description: 'Up and running'
        required: true
        default: true
  # push:
  #   branches-ignore: [dependabot/**]
  # pull_request:
  #   branches: [master]

jobs:
  scraper:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment || 'KookaS' }}
    env:
      DOCKER_IMAGE_NAME: this-image
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Login to ECR
        env:
          AWS_CLI_SERVICE: ecr
          ECR_IMAGE_TAG: latest
        run: |
          aws --version
          aws configure set aws_access_key_id ${{ vars.AWS_ACCESS_KEY }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_KEY }}
          aws configure set region ${{ vars.AWS_REGION }}
          aws configure list
          if [[ $AWS_CLI_SERVICE == ecr ]]; then
            aws ecr get-login-password --region ${{ vars.AWS_REGION }} | docker login --username AWS --password-stdin ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com
          elif [[ $AWS_CLI_SERVICE == ecr-public ]]; then
            aws ecr-public get-login-password --region ${{ vars.AWS_REGION }} | docker login --username AWS ---password-stdin public.ecr.aws
          fi

      - uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      
      - name: Setup Terraform v${{ env.TERRAFORM_VERSION }}
        uses: hashicorp/setup-Terraform@v1
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: true

      - name: Setup Terraform version
        run: terraform --version

      - name: Setup Terraform wrapper path
        run: which terraform
      - name: Setup Terragrunt v${{ env.TERRAGRUNT_VERSION }}
        run: |
          sudo wget -q -O /bin/terragrunt "https://github.com/gruntwork-io/terragrunt/releases/download/v${{ env.TERRAGRUNT_VERSION }}/terragrunt_linux_amd64"
          sudo chmod +x /bin/terragrunt
          terragrunt -v

      - name: Terragrunt prepare
        id: prepare
        run: |
          make prepare-terragrunt \
            DOMAIN_NAME=${{ vars.DOMAIN_NAME }}  \
            AWS_REGION=${{ vars.AWS_REGION }} \
            AWS_PROFILE=${{ vars.AWS_PROFILE }}  \
            AWS_ACCOUNT_ID=${{ vars.AWS_ACCOUNT_ID }}

      - name: Terragrunt backend
        id: backend
        run: |
          make prepare-scraper-backend \
            TERRAGRUNT_CONFIG_PATH=live/aws/region/scraper/backend \
            BRANCH_NAME=${{ github.head_ref || github.ref_name }}  \
            FLICKR_PRIVATE_KEY=${{ secrets.FLICKR_PRIVATE_KEY }} \
            FLICKR_PUBLIC_KEY=${{ secrets.FLICKR_PUBLIC_KEY }} \
            UNSPLASH_PRIVATE_KEY=${{ secrets.UNSPLASH_PRIVATE_KEY }} \
            UNSPLASH_PUBLIC_KEY=${{ secrets.UNSPLASH_PUBLIC_KEY }} \
            PEXELS_PUBLIC_KEY=${{ secrets.PEXELS_PUBLIC_KEY }} \
            AWS_REGION=${{ vars.AWS_REGION }} \
            AWS_ACCESS_KEY=${{ vars.AWS_ACCESS_KEY }} \
            AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}
          if [[ ${{ inputs.running }} == false ]]; then
            make destroy-ecs TERRAGRUNT_CONFIG_PATH=live/aws/region/scraper/backend
          else
            make init TERRAGRUNT_CONFIG_PATH=live/aws/region/scraper/backend
            make apply TERRAGRUNT_CONFIG_PATH=live/aws/region/scraper/backend
          fi

      - name: Terragrunt frontend
        id: frontend
        run: |
          export NEXT_PUBLIC_API_URL=$(terraform output -state=live/aws/region/scraper/backend/terraform.tfstate -json  microservice | jq '.ecs.elb.lb_dns_name')
          echo BACKEND DNS URL ::: ${NEXT_PUBLIC_API_URL}
          make prepare-scraper-frontend \
            TERRAGRUNT_CONFIG_PATH=live/aws/region/scraper/frontend \
            BRANCH_NAME=${{ github.head_ref || github.ref_name }}  \
            NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
          if [[ ${{ inputs.running }} == false ]]; then
            make destroy-ecs TERRAGRUNT_CONFIG_PATH=live/aws/region/scraper/frontend
          else
            make init TERRAGRUNT_CONFIG_PATH=live/aws/region/scraper/frontend
            make apply TERRAGRUNT_CONFIG_PATH=live/aws/region/scraper/frontend
          fi

      # # FIXME: there is no package for registry.terraform.io/hashicorp/aws there is no package for registry.terraform.io/hashicorp/null
      # - name: Build docker image
      #   run: |
      #     docker build --progress=plain -t $DOCKER_IMAGE_NAME -f Dockerfile .

      # - name: Scraper
      #   run: |
      #     docker run \
      #       -v /tmp:/tmp \
      #       --user 1001:1001 \
      #       --env AWS_REGION=${{ vars.AWS_REGION }} \
      #       --env AWS_PROFILE=${{ vars.AWS_PROFILE }} \
      #       --env AWS_ACCESS_KEY=${{ vars.AWS_ACCESS_KEY }} \
      #       --env AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }} \
      #       --env AWS_ACCOUNT_ID=${{ vars.AWS_ACCOUNT_ID }} \
      #       --env GITHUB_TOKEN=${{ secrets.GH_TERRA_TOKEN }} \
      #       --env SSH_PRIVATE_KEY="${{ secrets.SSH_PRIVATE_KEY }}" \
      #       --env SSH_PUBLIC_KEY="${{ vars.SSH_PUBLIC_KEY }}" \
      #       --env INPUT_RUNNING=${{ inputs.running }} \
      #       --env BRANCH_NAME=${{ github.head_ref || github.ref_name }} \
      #       --env DOMAIN_NAME=${{ vars.DOMAIN_NAME }} \
      #       --env FLICKR_PRIVATE_KEY=${{ secrets.FLICKR_PRIVATE_KEY }} \
      #       --env FLICKR_PUBLIC_KEY=${{ secrets.FLICKR_PUBLIC_KEY }} \
      #       --env UNSPLASH_PRIVATE_KEY=${{ secrets.UNSPLASH_PRIVATE_KEY }} \
      #       --env UNSPLASH_PUBLIC_KEY=${{ secrets.UNSPLASH_PUBLIC_KEY }} \
      #       --env PEXELS_PUBLIC_KEY=${{ secrets.PEXELS_PUBLIC_KEY }} \
      #       $DOCKER_IMAGE_NAME \
      #       /bin/bash -c '

      #         # tmp ownership
      #         sudo mkdir -p /tmp/out
      #         sudo chown 1001:1001 /tmp/out
      #         sudo chmod g+s /tmp/out
      #         ls -l /tmp/out

      #         # aws
      #         make aws-auth

      #         # github token
      #         make gh-auth-check

      #         # ssh
      #         eval `ssh-agent -s`
      #         mkdir -p ~/.ssh
      #         SSH_FOLDER=$(cd ~/.ssh; pwd)
      #         echo ${SSH_FOLDER}
      #         echo "${SSH_PRIVATE_KEY}" > ~/.ssh/action
      #         echo "${SSH_PUBLIC_KEY}" > ~/.ssh/action.pub
      #         sudo chmod -R 600 ${SSH_FOLDER}/action
      #         ssh-add ~/.ssh/action
      #         ssh-keyscan github.com >> ~/.ssh/known_hosts
      #         cat ~/.ssh/known_hosts

      #         # terragrunt
      #         make prepare-terragrunt \
      #           DOMAIN_NAME=${DOMAIN_NAME} \
      #           AWS_REGION=${AWS_REGION} \
      #           AWS_PROFILE=${AWS_PROFILE} \
      #           AWS_ACCOUNT_ID=${AWS_ACCOUNT_ID}

      #         # backend
      #         make prepare-scraper-backend \
      #           TERRAGRUNT_CONFIG_PATH=live/aws/region/scraper/backend \
      #           BRANCH_NAME=${BRANCH_NAME} \
      #           FLICKR_PRIVATE_KEY=${FLICKR_PRIVATE_KEY} \
      #           FLICKR_PUBLIC_KEY=${FLICKR_PUBLIC_KEY} \
      #           UNSPLASH_PRIVATE_KEY=${UNSPLASH_PRIVATE_KEY} \
      #           UNSPLASH_PUBLIC_KEY=${UNSPLASH_PUBLIC_KEY} \
      #           PEXELS_PUBLIC_KEY=${PEXELS_PUBLIC_KEY} \
      #           AWS_REGION=${AWS_REGION} \
      #           AWS_ACCESS_KEY=${AWS_ACCESS_KEY} \
      #           AWS_SECRET_KEY=${AWS_SECRET_KEY}
      #         if [[ ${INPUT_RUNNING} == false ]]; then
      #           make destroy-ecs TERRAGRUNT_CONFIG_PATH=live/aws/region/scraper/backend
      #         else
      #           make init TERRAGRUNT_CONFIG_PATH=live/aws/region/scraper/backend
      #           make apply TERRAGRUNT_CONFIG_PATH=live/aws/region/scraper/backend
      #         fi

      #         # frontend
      #         export NEXT_PUBLIC_API_URL=$(terraform output -state=live/aws/region/scraper/backend/terraform.tfstate -json  microservice | jq '.ecs.elb.lb_dns_name')
      #         echo BACKEND DNS URL ::: ${NEXT_PUBLIC_API_URL}
      #         make prepare-scraper-frontend \
      #           TERRAGRUNT_CONFIG_PATH=live/aws/region/scraper/frontend \
      #           BRANCH_NAME=${BRANCH_NAME} \
      #           NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      #         if [[ ${INPUT_RUNNING} == false ]]; then
      #           make destroy-ecs TERRAGRUNT_CONFIG_PATH=live/aws/region/scraper/frontend
      #         else
      #           make init TERRAGRUNT_CONFIG_PATH=live/aws/region/scraper/frontend
      #           make apply TERRAGRUNT_CONFIG_PATH=live/aws/region/scraper/frontend
      #         fi
      #         '

      # - name: Prepare terragrunt for all microservices
      #   run: |
      #     make prepare-terragrunt \
      #       DOMAIN_NAME=${{ vars.DOMAIN_NAME }} \
      #       AWS_REGION=${{ vars.AWS_REGION }} \
      #       AWS_PROFILE=${{ vars.AWS_PROFILE }} \
      #       AWS_ACCOUNT_ID=${{ vars.AWS_ACCOUNT_ID }}

      # - name: Prepare terragrunt for backend
      #   env: 
      #     GITHUB_TOKEN: ${{ secrets.GH_TERRA_TOKEN }}
      #     FLICKR_PRIVATE_KEY: ${{ secrets.FLICKR_PRIVATE_KEY }}
      #     FLICKR_PUBLIC_KEY: ${{ secrets.FLICKR_PUBLIC_KEY }}
      #     UNSPLASH_PRIVATE_KEY: ${{ secrets.UNSPLASH_PRIVATE_KEY }}
      #     UNSPLASH_PUBLIC_KEY: ${{ secrets.UNSPLASH_PUBLIC_KEY }}
      #     PEXELS_PUBLIC_KEY: ${{ secrets.PEXELS_PUBLIC_KEY }}
      #   run: |
      #     make prepare-scraper-backend \
      #       TERRAGRUNT_CONFIG_PATH=live/aws/region/scraper/backend \
      #       BRANCH_NAME=${{ github.head_ref || github.ref_name }} \
      #       FLICKR_PRIVATE_KEY=${FLICKR_PRIVATE_KEY} \
      #       FLICKR_PUBLIC_KEY=${FLICKR_PUBLIC_KEY} \
      #       UNSPLASH_PRIVATE_KEY=${UNSPLASH_PRIVATE_KEY} \
      #       UNSPLASH_PUBLIC_KEY=${UNSPLASH_PUBLIC_KEY} \
      #       PEXELS_PUBLIC_KEY=${PEXELS_PUBLIC_KEY} \
      #       AWS_REGION=${{ vars.AWS_REGION }} \
      #       AWS_ACCESS_KEY=${{ vars.AWS_ACCESS_KEY }} \
      #       AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}
      #     if [[ ${{ inputs.running }} == false ]]; then
      #       make destroy-ecs TERRAGRUNT_CONFIG_PATH=live/aws/region/scraper/backend
      #     else
      #       make init TERRAGRUNT_CONFIG_PATH=live/aws/region/scraper/backend
      #       make apply TERRAGRUNT_CONFIG_PATH=live/aws/region/scraper/backend
      #     fi
  
  # # FIXME: files created above are missing in reusable workflow
  # run-backend:
  #   needs: [prepare-backend]
  #   uses: ./.github/workflows/terragrunt.yml
  #   with:
  #     environment: ${{ inputs.environment || 'KookaS' }}
  #     running: ${{ inputs.running }}
  #     terragrunt_config_path: live/aws/region/scraper/backend
  #   secrets: inherit
  
  # # FIXME: files created above are missing in reusable workflow
  # run-frontend:
  #   needs: [prepare-frontend]
  #   uses: ./.github/workflows/terragrunt.yml
  #   with:
  #     environment: ${{ inputs.environment || 'KookaS' }}
  #     running: ${{ inputs.running }}
  #     terragrunt_config_path: live/aws/region/scraper/frontend
  #   secrets: inherit