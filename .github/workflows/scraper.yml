name: Scraper

on:
  workflow_dispatch:
    inputs:
      environment:
        type: environment
        description: "The environment to deploy to"
        required: true
        default: repositories
      running:
        type: boolean
        description: "Up and running"
        required: true
        default: true

env:
  # TERRAFORM_VERSION: 1.4.6
  # TERRAGRUNT_VERSION: 0.45.17
  ECR_PRIVACY: ${{ vars.CONTAINER_REGISTRY_PRIVACY }}
  IMAGE_TAG: latest
  ORGANIZATION_NAME: ${{ github.repository_owner }}
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }}

jobs:
  ecr:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment || 'repositories' }}
    env:
      ECR_REGISTRY_PRIVATE_URI: ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION_NAME }}.amazonaws.com
      ECR_REGISTRY_PUBLIC_URI: public.ecr.aws
    outputs:
      ECR_REPOSITORY_NAME: ${{ steps.get-output.outputs.ECR_REPOSITORY_NAME }}
      ECR_LOGIN_PASSWORD: ${{ steps.get-output.outputs.ECR_LOGIN_PASSWORD }}
      ECR_REGISTRY_URI: ${{ steps.get-output.outputs.ECR_REGISTRY_URI }}

    steps:
      - name: setup AWS CLI
        run: |
          aws --version
          aws configure set aws_access_key_id ${{ vars.AWS_ACCESS_KEY }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_KEY }}
          aws configure set region ${{ vars.AWS_REGION_NAME }}

      - name: Get ECR information
        id: get-output
        run: |
          REPOSITORY_NAME=$(basename ${{ github.repository }})

          ECR_REPOSITORY_NAME=$(echo $REPOSITORY_NAME-$BRANCH_NAME | tr A-Z a-z)
          echo "ECR_REPOSITORY_NAME=$ECR_REPOSITORY_NAME" >> $GITHUB_OUTPUT

          if [[ $ECR_PRIVACY == private ]]; then
            echo "ECR_LOGIN_PASSWORD=$(aws ecr get-login-password --region ${{ vars.AWS_REGION_NAME }})" >> $GITHUB_OUTPUT
            echo "ECR_REGISTRY_URI=$ECR_REGISTRY_PRIVATE_URI" >> $GITHUB_OUTPUT            
          elif [[ $ECR_PRIVACY == public ]]; then
            echo "ECR_LOGIN_PASSWORD=$(aws ecr-public get-login-password --region us-east-1)" >> $GITHUB_OUTPUT
            echo "ECR_REGISTRY_URI=$ECR_REGISTRY_PUBLIC_URI" >> $GITHUB_OUTPUT  
          fi


# jobs:
#   scraper:
#     runs-on: ubuntu-latest
#     environment: ${{ inputs.environment || 'repositories' }}
#     env:
#       DOCKER_IMAGE_NAME: this-image
#       ECR_PRIVACY: private  # fetch from each repo vars
#       ECR_REGISTRY_PRIVATE_URI: ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION_NAME }}.amazonaws.com
#       ECR_REGISTRY_PUBLIC_URI: public.ecr.aws
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v3

#       - name: Setup privacy env
#         run: |
#           if [[ $ECR_PRIVACY == private ]]; then
#             AWS_CLI_SERVICE=ecr
#             ECR_REGISTRY_URI=$ECR_REGISTRY_PRIVATE_URI
#           elif [[ $ECR_PRIVACY == public ]]; then
#             AWS_CLI_SERVICE=ecr-public
#             ECR_REGISTRY_URI=$ECR_REGISTRY_PUBLIC_URI
#           fi

#           echo AWS_CLI_SERVICE=$AWS_CLI_SERVICE
#           echo AWS_CLI_SERVICE=$AWS_CLI_SERVICE >> $GITHUB_ENV

#           echo ECR_REGISTRY_URI=$ECR_REGISTRY_URI
#           echo ECR_REGISTRY_URI=$ECR_REGISTRY_URI >> $GITHUB_ENV

#       - name: Setup AWS CLI        
#         run: |
#           # make aws-auth \
#           #   AWS_PROFILE_NAME=${{ vars.AWS_PROFILE_NAME }} \
#           #   AWS_REGION_NAME=${{ vars.AWS_REGION_NAME }} \
#           #   AWS_ACCESS_KEY=${{ vars.AWS_ACCESS_KEY }} \
#           #   AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }} \
#           #   REPOSITORIES_AWS_PROFILE_NAME=${{ vars.AWS_PROFILE_NAME }} \
#           #   REPOSITORIES_AWS_REGION_NAME=${{ vars.AWS_REGION_NAME }} \
#           #   REPOSITORIES_AWS_ACCESS_KEY=${{ vars.AWS_ACCESS_KEY }} \
#           #   REPOSITORIES_AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}

#           aws --version
#           aws configure set aws_access_key_id ${{ vars.AWS_ACCESS_KEY }}
#           aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_KEY }}
#           aws configure set region ${{ vars.AWS_REGION_NAME }}
#           aws configure list

#       - name: Login to ${{ vars.CONTAINER_REGISTRY_PRIVACY }} ECR
#         uses: docker/login-action@v2
#         with:
#           registry: ${{ env.ECR_REGISTRY_URI }}

#       - uses: webfactory/ssh-agent@v0.8.0
#         with:
#           ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

#       - name: Setup Terraform v${{ env.TERRAFORM_VERSION }}
#         uses: hashicorp/setup-Terraform@v2
#         with:
#           terraform_version: ${{ env.TERRAFORM_VERSION }}
#           terraform_wrapper: false

#       - name: Setup Terraform version
#         run: terraform --version

#       - name: Setup Terraform wrapper path
#         run: which terraform
#       - name: Setup Terragrunt v${{ env.TERRAGRUNT_VERSION }}
#         run: |
#           sudo wget -q -O /bin/terragrunt "https://github.com/gruntwork-io/terragrunt/releases/download/v${{ env.TERRAGRUNT_VERSION }}/terragrunt_linux_amd64"
#           sudo chmod +x /bin/terragrunt
#           terragrunt -v

  backend:
    needs: [ecr]
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment || 'repositories' }}
    container: 
      image: '${{ needs.ecr.outputs.ECR_REGISTRY_URI }}/${{ needs.ecr.outputs.ECR_REPOSITORY_NAME}}'
      credentials:
        username: AWS
        password: ${{ needs.ecr.outputs.ECR_LOGIN_PASSWORD }}
    env:
      GITHUB_TOKEN: ${{ secrets.GH_TERRA_TOKEN }}
      AWS_REGION_NAME: ${{ vars.AWS_REGION_NAME }}
      AWS_PROFILE_NAME: ${{ vars.AWS_PROFILE_NAME }}
      AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
      AWS_ACCESS_KEY: ${{ vars.AWS_ACCESS_KEY }}
      AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
      REPOSITORIES_AWS_REGION_NAME: ${{ vars.AWS_REGION_NAME }}
      REPOSITORIES_AWS_PROFILE_NAME: ${{ vars.AWS_PROFILE_NAME }}
      REPOSITORIES_AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
      REPOSITORIES_AWS_ACCESS_KEY: ${{ vars.AWS_ACCESS_KEY }}
      REPOSITORIES_AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
    outputs:
      DNS_URL: ${{ steps.backend.outputs.DNS_URL }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup SSH
        run: |
          sudo apk add --no-cache sudo openssh
          eval `ssh-agent -s`
          mkdir -p ~/.ssh
          SSH_FOLDER=$(cd ~/.ssh; pwd)
          echo ${SSH_FOLDER}
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/action
          echo "${{ vars.SSH_PUBLIC_KEY }}" > ~/.ssh/action.pub
          sudo chmod -R 600 ${SSH_FOLDER}/action
          ssh-add ~/.ssh/action
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          cat ~/.ssh/known_hosts

      - name: Setup AWS CLI
        id: setup
        run: |
          make aws-auth

      - name: Setup Github CLI
        run: |
          make -f Makefile_infra gh-auth-check

      - name: Terragrunt prepare
        id: prepare
        run: |
          make prepare-terragrunt \
            DOMAIN_NAME=${{ vars.DOMAIN_NAME }}  \
            AWS_REGION_NAME=${{ vars.AWS_REGION_NAME }} \
            AWS_PROFILE_NAME=${{ vars.AWS_PROFILE_NAME }}  \
            AWS_ACCOUNT_ID=${{ vars.AWS_ACCOUNT_ID }} \
            REPOSITORIES_AWS_REGION_NAME=${{ vars.AWS_REGION_NAME }} \
            REPOSITORIES_AWS_PROFILE_NAME=${{ vars.AWS_PROFILE_NAME }}  \
            REPOSITORIES_AWS_ACCOUNT_ID=${{ vars.AWS_ACCOUNT_ID }}

      - name: Terragrunt backend
        id: backend
        run: |
          TERRAGRUNT_CONFIG_PATH=live/aws/region/scraper/backend

          make prepare-scraper-backend \
            GITHUB_TOKEN=${{ secrets.GH_TERRA_TOKEN}} \
            TERRAGRUNT_CONFIG_PATH=${TERRAGRUNT_CONFIG_PATH} \
            BRANCH_NAME=${{ github.head_ref || github.ref_name }}  \
            FLICKR_PRIVATE_KEY=${{ secrets.FLICKR_PRIVATE_KEY }} \
            FLICKR_PUBLIC_KEY=${{ secrets.FLICKR_PUBLIC_KEY }} \
            UNSPLASH_PRIVATE_KEY=${{ secrets.UNSPLASH_PRIVATE_KEY }} \
            UNSPLASH_PUBLIC_KEY=${{ secrets.UNSPLASH_PUBLIC_KEY }} \
            PEXELS_PUBLIC_KEY=${{ secrets.PEXELS_PUBLIC_KEY }} \
            AWS_REGION_NAME=${{ vars.AWS_REGION_NAME }} \
            AWS_ACCESS_KEY=${{ vars.AWS_ACCESS_KEY }} \
            AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}

          make -f Makefile_infra init TERRAGRUNT_CONFIG_PATH=${TERRAGRUNT_CONFIG_PATH}

          if [[ ${{ inputs.running }} == false ]]; then
            make -f Makefile_infra destroy-microservice TERRAGRUNT_CONFIG_PATH=${TERRAGRUNT_CONFIG_PATH}
          else            
            make -f Makefile_infra apply TERRAGRUNT_CONFIG_PATH=${TERRAGRUNT_CONFIG_PATH}

            DNS_URL=$(make -f Makefile_infra output-microservice TERRAGRUNT_CONFIG_PATH=${TERRAGRUNT_CONFIG_PATH})
            if [[ -z ${DNS_URL} ]]; then
              echo -e '\033[41mDNS_URL\033[0m' ::: ${DNS_URL}
              exit 42
            fi
            echo -e '\033[44mDNS_URL\033[0m' ::: ${DNS_URL}
            echo DNS_URL=$DNS_URL >> $GITHUB_OUTPUT
          fi

  frontend:
    needs: [ecr, backend]
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment || 'repositories' }}
    container: 
      image: '${{ needs.ecr.outputs.ECR_REGISTRY_URI }}/${{ needs.ecr.outputs.ECR_REPOSITORY_NAME}}'
      credentials:
        username: AWS
        password: ${{ needs.ecr.outputs.ECR_LOGIN_PASSWORD }}
    env:
      GITHUB_TOKEN: ${{ secrets.GH_TERRA_TOKEN }}
      AWS_REGION_NAME: ${{ vars.AWS_REGION_NAME }}
      AWS_PROFILE_NAME: ${{ vars.AWS_PROFILE_NAME }}
      AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
      AWS_ACCESS_KEY: ${{ vars.AWS_ACCESS_KEY }}
      AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
      REPOSITORIES_AWS_REGION_NAME: ${{ vars.AWS_REGION_NAME }}
      REPOSITORIES_AWS_PROFILE_NAME: ${{ vars.AWS_PROFILE_NAME }}
      REPOSITORIES_AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
      REPOSITORIES_AWS_ACCESS_KEY: ${{ vars.AWS_ACCESS_KEY }}
      REPOSITORIES_AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
    outputs:
      DNS_URL: ${{ steps.frontend.outputs.DNS_URL }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup SSH
        run: |
          sudo apk add --no-cache sudo openssh
          eval `ssh-agent -s`
          mkdir -p ~/.ssh
          SSH_FOLDER=$(cd ~/.ssh; pwd)
          echo ${SSH_FOLDER}
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/action
          echo "${{ vars.SSH_PUBLIC_KEY }}" > ~/.ssh/action.pub
          sudo chmod -R 600 ${SSH_FOLDER}/action
          ssh-add ~/.ssh/action
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          cat ~/.ssh/known_hosts

      - name: Setup AWS CLI
        id: setup
        run: |
          make aws-auth

      - name: Setup Github CLI
        run: |
          make -f Makefile_infra gh-auth-check

      - name: Terragrunt prepare
        id: prepare
        run: |
          make prepare-terragrunt \
            DOMAIN_NAME=${{ vars.DOMAIN_NAME }}  \
            AWS_REGION_NAME=${{ vars.AWS_REGION_NAME }} \
            AWS_PROFILE_NAME=${{ vars.AWS_PROFILE_NAME }}  \
            AWS_ACCOUNT_ID=${{ vars.AWS_ACCOUNT_ID }} \
            REPOSITORIES_AWS_REGION_NAME=${{ vars.AWS_REGION_NAME }} \
            REPOSITORIES_AWS_PROFILE_NAME=${{ vars.AWS_PROFILE_NAME }}  \
            REPOSITORIES_AWS_ACCOUNT_ID=${{ vars.AWS_ACCOUNT_ID }}

      - name: Terragrunt frontend
        id: frontend
        run: |
          export TERRAGRUNT_CONFIG_PATH=live/aws/region/scraper/frontend

          make prepare-scraper-frontend \
            GITHUB_TOKEN=${{ secrets.GH_TERRA_TOKEN}} \
            TERRAGRUNT_CONFIG_PATH=${TERRAGRUNT_CONFIG_PATH} \
            BRANCH_NAME=${{ github.head_ref || github.ref_name }}  \
            NEXT_PUBLIC_API_URL=${{ needs.backend.outputs.DNS_URL}}

          make -f Makefile_infra init TERRAGRUNT_CONFIG_PATH=${TERRAGRUNT_CONFIG_PATH}

          if [[ ${{ inputs.running }} == false ]]; then
            make -f Makefile_infra destroy-microservice TERRAGRUNT_CONFIG_PATH=${TERRAGRUNT_CONFIG_PATH}
          else
            make -f Makefile_infra apply TERRAGRUNT_CONFIG_PATH=${TERRAGRUNT_CONFIG_PATH}

            DNS_URL=$(make -f Makefile_infra output-microservice TERRAGRUNT_CONFIG_PATH=${TERRAGRUNT_CONFIG_PATH})
            if [[ -z ${DNS_URL} ]]; then
              echo -e '\033[41mDNS_URL\033[0m' missing
              exit 42
            fi
            echo -e '\033[44mDNS_URL\033[0m' ::: ${DNS_URL}
            echo DNS_URL=$DNS_URL >> $GITHUB_ENV
          fi