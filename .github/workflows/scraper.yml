name: Scraper

on:
  workflow_dispatch:
    inputs:
      environment-machine:
        type: environment
        description: The deployment environment
        required: true
      backend:
        description: Backend
        type: choice
        required: true
        options: 
          - skip
          - run
          - destroy
        default: skip
      frontend:
        description: Frontend
        type: choice
        required: true
        options: 
          - skip
          - run
          - destroy
        default: skip
      labelstudio:
        description: Labelstudio
        type: choice
        required: true
        options: 
          - skip
          - run
          - destroy
        default: skip

env:
  ECR_PRIVACY: ${{ vars.CONTAINER_REGISTRY_PRIVACY }}
  ORGANIZATION_NAME: ${{ github.repository_owner }}
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
  ECR_REPOSITORY_EXTENSION: ''

jobs:
  setup:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment-machine }}
    env:
      ECR_REGISTRY_PRIVATE_URI: ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION_NAME }}.amazonaws.com
      ECR_REGISTRY_PUBLIC_URI: public.ecr.aws
    outputs:
      ECR_REPOSITORY_NAME: ${{ steps.get-output.outputs.ECR_REPOSITORY_NAME }}
      ECR_LOGIN_PASSWORD: ${{ steps.get-output.outputs.ECR_LOGIN_PASSWORD }}
      ECR_REGISTRY_URI: ${{ steps.get-output.outputs.ECR_REGISTRY_URI }}
      ECR_REPOSITORY_EXTENSION: ${{ steps.get-output.outputs.ECR_REPOSITORY_EXTENSION }}

    steps:

      - name: setup AWS CLI
        run: |
          aws --version
          aws configure set aws_access_key_id ${{ vars.AWS_ACCESS_KEY }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_KEY }}
          aws configure set region ${{ vars.AWS_REGION_NAME }}

      - name: Get ECR information
        id: get-output
        run: |
          REPOSITORY_NAME=$(basename ${{ github.repository }})

          ECR_REPOSITORY_NAME=$(echo $REPOSITORY_NAME-$BRANCH_NAME | tr A-Z a-z)
          echo "ECR_REPOSITORY_NAME=$ECR_REPOSITORY_NAME" >> $GITHUB_OUTPUT
          echo "ECR_REPOSITORY_EXTENSION=$ECR_REPOSITORY_EXTENSION" >> $GITHUB_OUTPUT

          if [[ $ECR_PRIVACY == private ]]; then
            echo "ECR_LOGIN_PASSWORD=$(aws ecr get-login-password --region ${{ vars.AWS_REGION_NAME }})" >> $GITHUB_OUTPUT
            echo "ECR_REGISTRY_URI=$ECR_REGISTRY_PRIVATE_URI" >> $GITHUB_OUTPUT            
          elif [[ $ECR_PRIVACY == public ]]; then
            echo "ECR_LOGIN_PASSWORD=$(aws ecr-public get-login-password --region us-east-1)" >> $GITHUB_OUTPUT
            echo "ECR_REGISTRY_URI=$ECR_REGISTRY_PUBLIC_URI" >> $GITHUB_OUTPUT  
          fi

  backend:
    needs: [setup]
    if: ${{( inputs.backend == 'run' ) || ( inputs.backend == 'destroy'  )}} 
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment-machine }}
    container: 
      image: ${{ needs.setup.outputs.ECR_REGISTRY_URI }}/${{ needs.setup.outputs.ECR_REPOSITORY_NAME}}${{ needs.setup.outputs.ECR_REPOSITORY_EXTENSION }}:latest
      credentials:
        username: AWS
        password: ${{ needs.setup.outputs.ECR_LOGIN_PASSWORD }}
    env:
      GITHUB_TOKEN: ${{ secrets.GH_TERRA_TOKEN }}
      AWS_REGION_NAME: ${{ vars.AWS_REGION_NAME }}
      AWS_PROFILE_NAME: ${{ vars.AWS_PROFILE_NAME }}
      AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
      AWS_ACCESS_KEY: ${{ vars.AWS_ACCESS_KEY }}
      AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
      DOMAIN_NAME: ${{ vars.DOMAIN_NAME }}
      DOMAIN_SUFFIX: ${{ vars.DOMAIN_SUFFIX }}
      VPC_ID: ${{ vars.VPC_ID }}
      TERRAGRUNT_CONFIG_PATH: live/aws/region/scraper/backend
    outputs:
      DNS_URL: ${{ steps.apply.outputs.DNS_URL }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Versions
        run: |
          terraform --version
          terragrunt --version

      # - name: Setup SSH
      #   run: |
      #     sudo apk add --no-cache sudo openssh
      #     eval `ssh-agent -s`
      #     mkdir -p ~/.ssh
      #     SSH_FOLDER=$(cd ~/.ssh; pwd)
      #     echo ${SSH_FOLDER}
      #     echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/action
      #     echo "${{ vars.SSH_PUBLIC_KEY }}" > ~/.ssh/action.pub
      #     sudo chmod -R 600 ${SSH_FOLDER}/action
      #     ssh-add ~/.ssh/action
      #     ssh-keyscan github.com >> ~/.ssh/known_hosts
      #     cat ~/.ssh/known_hosts

      - name: Setup AWS CLI
        run: |
          make aws-auth

      - name: Setup Github CLI
        run: |
          make -f Makefile_infra gh-auth-check

      - name: Terragrunt prepare
        run: |
          make prepare-terragrunt \
            DOMAIN_NAME=${{ vars.DOMAIN_NAME }}  \
            DOMAIN_SUFFIX=${{ vars.DOMAIN_SUFFIX }}  \
            AWS_REGION_NAME=${{ vars.AWS_REGION_NAME }} \
            AWS_PROFILE_NAME=${{ vars.AWS_PROFILE_NAME }}  \
            AWS_ACCOUNT_ID=${{ vars.AWS_ACCOUNT_ID }}

          make prepare-scraper-backend \
            GITHUB_TOKEN=${{ secrets.GH_TERRA_TOKEN}} \
            TERRAGRUNT_CONFIG_PATH=${TERRAGRUNT_CONFIG_PATH} \
            BRANCH_NAME=${{ github.head_ref || github.ref_name }}  \
            FLICKR_PRIVATE_KEY=${{ secrets.FLICKR_PRIVATE_KEY }} \
            FLICKR_PUBLIC_KEY=${{ secrets.FLICKR_PUBLIC_KEY }} \
            UNSPLASH_PRIVATE_KEY=${{ secrets.UNSPLASH_PRIVATE_KEY }} \
            UNSPLASH_PUBLIC_KEY=${{ secrets.UNSPLASH_PUBLIC_KEY }} \
            PEXELS_PUBLIC_KEY=${{ secrets.PEXELS_PUBLIC_KEY }} \
            AWS_REGION_NAME=${{ vars.AWS_REGION_NAME }} \
            AWS_ACCESS_KEY=${{ vars.AWS_ACCESS_KEY }} \
            AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}

      - name: Terragrunt init
        run: |
          make -f Makefile_infra init TERRAGRUNT_CONFIG_PATH=${TERRAGRUNT_CONFIG_PATH}

      - name: Terragrunt plan
        run: |
          make -f Makefile_infra plan TERRAGRUNT_CONFIG_PATH=${TERRAGRUNT_CONFIG_PATH}

      - name: Terragrunt apply
        if: ${{ inputs.backend == 'run' }}
        id: apply
        run: |
          make -f Makefile_infra apply TERRAGRUNT_CONFIG_PATH=${TERRAGRUNT_CONFIG_PATH}

          DNS_URL=$(make -f Makefile_infra output-microservice-ecs TERRAGRUNT_CONFIG_PATH=${TERRAGRUNT_CONFIG_PATH})
          if [[ -z ${DNS_URL} ]] || [[ ${DNS_URL} = null ]]; then
            echo -e '\033[41mDNS_URL\033[0m' ::: ${DNS_URL}
            exit 42
          fi
          echo -e '\033[44mDNS_URL\033[0m' ::: ${DNS_URL}
          echo DNS_URL=$DNS_URL >> $GITHUB_OUTPUT

      - name: Terragrunt destroy
        if: ${{ inputs.backend == 'destroy' }}
        run: |
          make -f Makefile_infra destroy-microservice TERRAGRUNT_CONFIG_PATH=${TERRAGRUNT_CONFIG_PATH}

  frontend:
    needs: [setup, backend]
    if: ${{ ( inputs.backend == 'run' &&  inputs.frontend == 'run' &&  contains(join(needs.*.result, ','), 'success')  ) ||  ( inputs.frontend  == 'destroy' ) }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment-machine }}
    container: 
      image: ${{ needs.setup.outputs.ECR_REGISTRY_URI }}/${{ needs.setup.outputs.ECR_REPOSITORY_NAME}}${{ needs.setup.outputs.ECR_REPOSITORY_EXTENSION }}:latest
      credentials:
        username: AWS
        password: ${{ needs.setup.outputs.ECR_LOGIN_PASSWORD }}
    env:
      GITHUB_TOKEN: ${{ secrets.GH_TERRA_TOKEN }}
      AWS_REGION_NAME: ${{ vars.AWS_REGION_NAME }}
      AWS_PROFILE_NAME: ${{ vars.AWS_PROFILE_NAME }}
      AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
      AWS_ACCESS_KEY: ${{ vars.AWS_ACCESS_KEY }}
      AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
      DOMAIN_NAME: ${{ vars.DOMAIN_NAME }}
      DOMAIN_SUFFIX: ${{ vars.DOMAIN_SUFFIX }}
      VPC_ID: ${{ vars.VPC_ID }}
      TERRAGRUNT_CONFIG_PATH: live/aws/region/scraper/frontend
    outputs:
      DNS_URL: ${{ steps.apply.outputs.DNS_URL }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Versions
        run: |
          terraform --version
          terragrunt --version

      # - name: Setup SSH
      #   run: |
      #     sudo apk add --no-cache sudo openssh
      #     eval `ssh-agent -s`
      #     mkdir -p ~/.ssh
      #     SSH_FOLDER=$(cd ~/.ssh; pwd)
      #     echo ${SSH_FOLDER}
      #     echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/action
      #     echo "${{ vars.SSH_PUBLIC_KEY }}" > ~/.ssh/action.pub
      #     sudo chmod -R 600 ${SSH_FOLDER}/action
      #     ssh-add ~/.ssh/action
      #     ssh-keyscan github.com >> ~/.ssh/known_hosts
      #     cat ~/.ssh/known_hosts

      - name: Setup AWS CLI
        run: |
          make aws-auth

      - name: Setup Github CLI
        run: |
          make -f Makefile_infra gh-auth-check

      - name: Terragrunt prepare
        run: |
          make prepare-terragrunt \
            DOMAIN_NAME=$DOMAIN_NAME  \
            DOMAIN_SUFFIX=$DOMAIN_SUFFIX  \
            AWS_REGION_NAME=$AWS_REGION_NAME \
            AWS_PROFILE_NAME=$AWS_PROFILE_NAME  \
            AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID
          
          make prepare-scraper-frontend \
            GITHUB_TOKEN=${{ secrets.GH_TERRA_TOKEN}} \
            TERRAGRUNT_CONFIG_PATH=${TERRAGRUNT_CONFIG_PATH} \
            BRANCH_NAME=${{ github.head_ref || github.ref_name }}  \
            NEXT_PUBLIC_API_URL=${{ needs.backend.outputs.DNS_URL}}

      - name: Terragrunt init
        run: |
          make -f Makefile_infra init TERRAGRUNT_CONFIG_PATH=${TERRAGRUNT_CONFIG_PATH}

      - name: Terragrunt plan
        run: |
          make -f Makefile_infra plan TERRAGRUNT_CONFIG_PATH=${TERRAGRUNT_CONFIG_PATH}

      - name: Terragrunt apply
        if: ${{ inputs.frontend == 'run' }}
        id: apply
        run: |
          make -f Makefile_infra apply TERRAGRUNT_CONFIG_PATH=${TERRAGRUNT_CONFIG_PATH}

          DNS_URL=$(make -f Makefile_infra output-microservice-ecs TERRAGRUNT_CONFIG_PATH=${TERRAGRUNT_CONFIG_PATH})
          if [[ -z ${DNS_URL} ]] || [[ ${DNS_URL} = null ]]; then
            echo -e '\033[41mDNS_URL\033[0m' ::: ${DNS_URL}
            exit 42
          fi
          echo -e '\033[44mDNS_URL\033[0m' ::: ${DNS_URL}
          echo DNS_URL=$DNS_URL >> $GITHUB_OUTPUT

      - name: Terragrunt destroy
        if: ${{ inputs.frontend == 'destroy' }}
        run: |
          make -f Makefile_infra destroy-microservice TERRAGRUNT_CONFIG_PATH=${TERRAGRUNT_CONFIG_PATH}

  labelstudio:
    needs: [setup]
    if: ${{ inputs.labelstudio == 'run' || inputs.labelstudio == 'destroy'  }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment-machine }}
    container:
      image: ${{ needs.setup.outputs.ECR_REGISTRY_URI }}/${{ needs.setup.outputs.ECR_REPOSITORY_NAME}}${{ needs.setup.outputs.ECR_REPOSITORY_EXTENSION }}:1.4.4
      credentials:
        username: AWS
        password: ${{ needs.setup.outputs.ECR_LOGIN_PASSWORD }}
    env:
      GITHUB_TOKEN: ${{ secrets.GH_TERRA_TOKEN }}
      AWS_REGION_NAME: eu-north-1
      AWS_PROFILE_NAME: ${{ vars.AWS_PROFILE_NAME }}
      AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
      AWS_ACCESS_KEY: ${{ vars.AWS_ACCESS_KEY }}
      AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
      DOMAIN_NAME: ${{ vars.DOMAIN_NAME }}
      DOMAIN_SUFFIX: ${{ vars.DOMAIN_SUFFIX }}
      VPC_ID: ${{ vars.VPC_ID }}
      TERRAGRUNT_CONFIG_PATH: live/aws/region/scraper/labelstudio
    outputs:
      DNS_URL: ${{ steps.apply.outputs.DNS_URL }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Versions
        run: |
          terraform --version
          terragrunt --version

      # - name: Setup SSH
      #   run: |
      #     sudo apk add --no-cache sudo openssh
      #     eval `ssh-agent -s`
      #     mkdir -p ~/.ssh
      #     SSH_FOLDER=$(cd ~/.ssh; pwd)
      #     echo ${SSH_FOLDER}
      #     echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/action
      #     echo "${{ vars.SSH_PUBLIC_KEY }}" > ~/.ssh/action.pub
      #     sudo chmod -R 600 ${SSH_FOLDER}/action
      #     ssh-add ~/.ssh/action
      #     ssh-keyscan github.com >> ~/.ssh/known_hosts
      #     cat ~/.ssh/known_hosts

      - name: Setup AWS CLI
        run: |
          make aws-auth

      - name: Terragrunt prepare
        run: |
          make prepare-terragrunt \
            DOMAIN_NAME=$DOMAIN_NAME  \
            DOMAIN_SUFFIX=$DOMAIN_SUFFIX  \
            AWS_REGION_NAME=$AWS_REGION_NAME \
            AWS_PROFILE_NAME=$AWS_PROFILE_NAME  \
            AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID

          make prepare-scraper-labelstudio

      - name: Terragrunt init
        run: |
          make -f Makefile_infra init TERRAGRUNT_CONFIG_PATH=${TERRAGRUNT_CONFIG_PATH}

      - name: Terragrunt plan
        run: |
          make -f Makefile_infra plan TERRAGRUNT_CONFIG_PATH=${TERRAGRUNT_CONFIG_PATH}

      - name: Terragrunt apply
        if: ${{ inputs.labelstudio == 'run' }}
        id: apply
        run: |
          make -f Makefile_infra apply TERRAGRUNT_CONFIG_PATH=${TERRAGRUNT_CONFIG_PATH}

          DNS_URL=$(terragrunt output --terragrunt-non-interactive --terragrunt-working-dir ${TERRAGRUNT_CONFIG_PATH} -json labelstudio | jq '.load_balancer_host')
          if [[ -z ${DNS_URL} ]] || [[ ${DNS_URL} = null ]]; then
            echo -e '\033[41mDNS_URL\033[0m' ::: ${DNS_URL}
            exit 42
          fi
          echo -e '\033[44mDNS_URL\033[0m' ::: ${DNS_URL}
          echo DNS_URL=$DNS_URL >> $GITHUB_OUTPUT

      - name: Terragrunt destroy
        if: ${{ inputs.labelstudio == 'destroy' }}
        run: |
          terragrunt destroy --terragrunt-non-interactive -auto-approve --terragrunt-working-dir ${TERRAGRUNT_CONFIG_PATH} -target module.labelstudio
