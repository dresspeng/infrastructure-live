name: Plan

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'The branch to build'
        required: true
      environment:
        description: 'The environment to deploy to'
        required: false
        default: KookaS
  push:
    branches-ignore: [dependabot/**]
  pull_request:
    branches: [master]

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  AWS_PROFILE: ${{ vars.AWS_PROFILE }}
  AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
  AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
  AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
  AWS_CLI_SERVICE: ecr
  ECR_REGISTRY_URI: ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com
  ECR_REPOSITORY_NAME: kookas-infrastructure-live-master
  ECR_IMAGE_TAG: latest
  ENVIRONMENT_NAME: prod
  FLICKR_PRIVATE_KEY: 123
  FLICKR_PUBLIC_KEY: 123
  UNSPLASH_PRIVATE_KEY: 123
  UNSPLASH_PUBLIC_KEY: 123
  PEXELS_PUBLIC_KEY: 123
  TERRAFORM_VERSION: 1.4.6
  TERRAGRUNT_VERSION: 0.45.17

jobs:
  ecr-publish:
    name: ECR publish steps
    runs-on: ubuntu-latest
    environment: KookaS
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup AWS CLI
        run: |
          aws --version
          aws configure set aws_access_key_id $AWS_ACCESS_KEY
          aws configure set aws_secret_access_key $AWS_SECRET_KEY
          aws configure set region $AWS_REGION
      # - name: Login to ECR
      #   run: |
      #     if [[ $AWS_CLI_SERVICE == ecr ]]; then
      #       aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY_URI
      #     elif [[ $AWS_CLI_SERVICE == ecr-public ]]; then
      #       aws ecr-public get-login-password --region $AWS_REGION | docker login --username AWS ---password-stdin public.ecr.aws
      #     fi
      # - name: Terragrunt Plan
      #   run: |
      #     mkdir -p $(pwd)/.ssh
      #     echo "${SSH_PRIVATE_KEY}" > $(pwd)/.ssh/action.key
      #     sudo chown ${USER} $(pwd)/.ssh/action
      #     sudo chmod -R 600 $(pwd)/.ssh/action
      #     cat $(pwd)/.ssh/action.key
      #     sudo docker build -t this-image -f Dockerfile .
      #     sudo docker run -it \
      #       -v /tmp:/tmp \
      #       -v $(pwd)/.ssh:/home/user/.ssh \
      #       --env AWS_REGION=${AWS_REGION} \
      #       --env AWS_PROFILE=${AWS_PROFILE} \
      #       --env AWS_ACCESS_KEY=${AWS_ACCESS_KEY} \
      #       --env AWS_SECRET_KEY=${AWS_SECRET_KEY} \
      #       --env AWS_ACCOUNT_ID=${AWS_ACCOUNT_ID} \
      #       --env ENVIRONMENT_NAME=${ENVIRONMENT_NAME} \
      #       --env GITHUB_TOKEN=${GH_TERRA_TOKEN} \
      #       this-image \
      #       /bin/bash -c 'sudo chown ${USER} /home/user/.ssh; sudo chmod -R 600 /home/user/.ssh; ls -l /home/user/.ssh; sudo cat /home/user/.ssh/action.key; sudo make ssh-auth SSH_FOLDER="/home/user/.ssh"; ssh-add /home/user/.ssh/action.key; git config --global user.name $(git config --global user.name); git config --global user.email $(git config --global user.email); git config --global credential.helper $(git config --global credential.helper); echo $(git config --global -l); sudo make scraper-prepare; sudo make scraper-init; sudo make scraper-validate; sudo make scraper-plan OUTPUT_FILE=/tmp/tf.plan; terraform show -no-color /tmp/tf.plan 2>&1 > /tmp/plan.txt'
      # Install the latest version of Terragrunt CLI and configure the Terragrunt CLI configuration file with a Terragrunt Cloud user API token
      - uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      
      - name: Setup Terraform v${{ env.TERRAFORM_VERSION }}
        uses: hashicorp/setup-Terraform@v1
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: true

      - name: Setup Terraform version
        run: terraform --version

      - name: Setup Terraform wrapper path
        run: which terraform
      - name: Setup Terragrunt v${{ env.TERRAGRUNT_VERSION }}
        run: |
          sudo wget -q -O /bin/terragrunt "https://github.com/gruntwork-io/terragrunt/releases/download/v${{ env.TERRAGRUNT_VERSION }}/terragrunt_linux_amd64"
          sudo chmod +x /bin/terragrunt
          terragrunt -v

      - name: Prepare Terragrunt
        env: 
          GITHUB_TOKEN: ${{ secrets.GH_TERRA_TOKEN }}
        run: |
          make scraper-prepare

      - name: Terragrunt init
        id: init
        run: |
          make scraper-init

      - name: Terragrunt validate
        id: validate
        run: |
          make scraper-validate

      - name: Terragrunt plan
        id: plan
        continue-on-error: true
        run: |
          make scraper-plan OUTPUT_FILE=plan.tmp
          terraform show -no-color plan.tmp >${GITHUB_WORKSPACE}/plan.out

      - name: Terraform - Show Plan in PR
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GH_TERRA_TOKEN }}
          script: |
            const run_url = process.env.GITHUB_SERVER_URL + '/' + process.env.GITHUB_REPOSITORY + '/actions/runs/' + process.env.GITHUB_RUN_ID
            const run_link = '<a href="' + run_url + '">Actions</a>.'
            const fs = require('fs')
            const plan_file = fs.readFileSync('plan.out', 'utf8')
            const plan = plan_file.length > 65000 ? plan_file.toString().substring(0, 65000) + " ..." : plan_file
            const truncated_message = plan_file.length > 65000 ? "Output is too long and was truncated. You can read full Plan in " + run_link + "<br /><br />" : ""
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`\n
            ${plan}
            \`\`\`
            
            </details>
            ${truncated_message}

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ github.workspace }}\`, Workflow: \`${{ github.workflow }}\`*`;
              
            github.rest.pulls.createComment({
              pull_number: context.pull.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })