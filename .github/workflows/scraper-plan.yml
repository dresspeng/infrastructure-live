name: Plan

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'The branch to build'
        required: true
      environment:
        description: 'The environment to deploy to'
        required: false
        default: KookaS
  push:
    branches-ignore: [dependabot/**]

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  AWS_PROFILE: ${{ vars.AWS_PROFILE }}
  AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
  AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
  AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
  AWS_CLI_SERVICE: ecr
  ECR_REGISTRY_URI: ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com
  ECR_REPOSITORY_NAME: kookas-infrastructure-live-master
  ECR_IMAGE_TAG: latest
  GH_TERRA_TOKEN: ${{ secrets.GH_TERRA_TOKEN }}
  ENVIRONMENT_NAME: prod
  FLICKR_PRIVATE_KEY: 123
  FLICKR_PUBLIC_KEY: 123
  UNSPLASH_PRIVATE_KEY: 123
  UNSPLASH_PUBLIC_KEY: 123
  PEXELS_PUBLIC_KEY: 123

jobs:
  ecr-publish:
    name: ECR publish steps
    runs-on: ubuntu-latest
    environment: KookaS
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/action.key
          chmod 600 ~/.ssh/action.key
          cat <<-EOF >> ~/.ssh/config
            Host action
            HostName $SSH_HOST
            User $SSH_USER
            IdentityFile ~/.ssh/action.key
            StrictHostKeyChecking no
          EOF
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_KEY: ${{ secrets.SSH_KEY }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
      - name: Setup AWS CLI
        run: |
          aws --version
          aws configure set aws_access_key_id $AWS_ACCESS_KEY
          aws configure set aws_secret_access_key $AWS_SECRET_KEY
          aws configure set region $AWS_REGION
      - name: Login to ECR
        run: |
          if [[ $AWS_CLI_SERVICE == ecr ]]; then
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY_URI
          elif [[ $AWS_CLI_SERVICE == ecr-public ]]; then
            aws ecr-public get-login-password --region $AWS_REGION | docker login --username AWS ---password-stdin public.ecr.aws
          fi
      - name: Terragrunt Plan
        run: |
          sudo docker build -t this-image -f Dockerfile .
          sudo docker run -it \
            -v /tmp:/tmp \
            -v ~/.ssh:~/.ssh \
            --env AWS_REGION=${AWS_REGION} \
            --env AWS_PROFILE=${AWS_PROFILE} \
            --env AWS_ACCESS_KEY=${AWS_ACCESS_KEY} \
            --env AWS_SECRET_KEY=${AWS_SECRET_KEY} \
            --env AWS_ACCOUNT_ID=${AWS_ACCOUNT_ID} \
            --env ENVIRONMENT_NAME=${ENVIRONMENT_NAME} \
            --env GITHUB_TOKEN=${GH_TERRA_TOKEN} \
            this-image \
            /bin/bash -c 'make scraper-prepare; make scraper-init; make scraper-validate; make scraper-plan OUTPUT_FOLDER=/tmp/tf.plan; terraform show -no-color /tmp/tf.plan 2>&1 > /tmp/plan.txt'
      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ github.token }}
          script: |
            const fs = require("fs");
            const plan = fs.readFileSync("/tmp/plan.txt", "utf8");
            const maxGitHubBodyCharacters = 65536;

            function chunkSubstr(str, size) {
              const numChunks = Math.ceil(str.length / size)
              const chunks = new Array(numChunks)
              for (let i = 0, o = 0; i < numChunks; ++i, o += size) {
                chunks[i] = str.substr(o, size)
              }
              return chunks
            }

            // Split the Terraform plan into chunks if it's too big and can't fit into the GitHub Action
            var plans = chunkSubstr(plan, maxGitHubBodyCharacters); 
            for (let i = 0; i < plans.length; i++) {
              const output = `### ${{ inputs.plan-title }} Part # ${i + 1}
              #### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
              #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
              #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`
              <details><summary>Show Plan</summary>
              \`\`\`\n
              ${plans[i]}
              \`\`\`
              </details>
              *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ inputs.working-directory }}\`, Workflow: \`${{ github.workflow }}\`*`;   

              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }